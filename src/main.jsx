// Импортируем StrictMode из библиотеки React
// StrictMode - это инструмент для выделения потенциальных проблем в приложении
// Он активирует дополнительные проверки и предупреждения для своих потомков
import { StrictMode } from 'react';

// Импортируем функцию createRoot из react-dom/client
// createRoot позволяет создать корневой узел для рендеринга React-приложения
import { createRoot } from 'react-dom/client';

// Импортируем главный компонент приложения App из файла App.jsx
// App является корневым компонентом всего приложения
import App from './App.jsx';

// Импортируем файл глобальных стилей index.scss
// Этот файл содержит общие стили для всего приложения
import './index.scss';

// Создаем корневой узел React-приложения
// document.getElementById('root') - находим DOM-элемент с id 'root' в index.html
// createRoot() инициализирует React для работы с этим DOM-элементом
const root = createRoot(document.getElementById('root'));

// Вызываем метод render() на корневом узле для отображения приложения
// Внутри рендерим компоненты, обернутые в StrictMode для дополнительных проверок
root.render(
  // StrictMode активирует дополнительные проверки только в режиме разработки
  // В продакшене StrictMode не оказывает влияния на производительность
  <StrictMode>
    {/* 
      Основной компонент приложения App
      Здесь начинается иерархия всех компонентов нашего приложения
    */}
    <App />
  </StrictMode>
);

/*
  Важные заметки о работе этого кода:

  1. document.getElementById('root') - ищет элемент с id="root" в public/index.html
  2. createRoot() - современный API React для создания корневого узла (начиная с React 18)
  3. root.render() - метод для рендеринга React-элементов в DOM
  4. StrictMode помогает обнаружить:
     - Небезопасные методы жизненного цикла
     - Устаревшие API
     - Неожиданные побочные эффекты
  5. Весь код остается на английском, только комментарии локализованы на русский
  6. Структура и логика кода полностью сохранены без изменений
*/





